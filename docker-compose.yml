version: "3"
services:
  workspace:
    build:
      context: ./docker/workspace
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    tty: true
    volumes:
      - ./projects:/projects
    networks:
      - webnetwork
    hostname: workspace

  redisdb:
     build:
        context: ./docker/redis
     volumes:
        - ./docker/redis/data:/data
     networks:
      - webnetwork
     hostname: redisdb

  nginx:
     build:
       context: ./docker/nginx
       args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
     restart: always
     ports:
       - ${HTTP_PORT}:80
       - ${HTTPS_PORT}:443
     volumes:
        - ./projects:/projects
        - ./docker/nginx/sites:/etc/nginx/conf.d
     depends_on:
        - phpfpm
        - redisdb
        - db
        - adminer
     networks:
        webnetwork:
            aliases:
                - moodle.test
                - api.test
     hostname: nginx

  db:
    build:
      context: ./docker/db
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-dbpassword}
      - MYSQL_USER=${MYSQL_USER:-dbuser}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-dbuser}
    networks:
      - webnetwork
    volumes:
      - ./docker/db/data:/var/lib/mysql
    hostname: mariadb

  postgres:
    build:
       context: ./docker/postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dbpassword}
      - POSTGRES_USER=${POSTGRES_USER:-dbuser}
    networks:
      - webnetwork
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
    hostname: postgres
  
  py:
    build:
      context: ./docker/python
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: py

  phpfpm:
    build:
      context: ./docker/phpfpm
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: phpfpm
 
  dotnet:
    build:
      context: ./docker/dotnet
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: dotnet

  mongo:
    image: mongo
    restart: always
    environment:
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-dbpassword}
      - MONGODB_USERNAME=${MONGODB_USERNAME:-dbuser}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD:-dbpassword}
    volumes:
      - ./docker/mongo/data:/data/db
    networks:
      - webnetwork
    hostname: mongodb

  mail:
    image: mailhog/mailhog
    ports:
      - ${MAILHOG_PORT:-1025}:1025
      - ${MAILHOG_UI:-8025}:8025
    networks:
      - webnetwork
    hostname: mailhog
  
  adminer:
    image: adminer
    networks:
      - webnetwork
    hostname: adminer

  nodejs:
    build:
      context: ./docker/nodejs
    volumes:
      - ./projects:/projects
    hostname: nodejs
    ports:
      - ${NODE_PORT}:8080
    networks:
      - webnetwork

  minio:
    build:
      context: './docker/minio'
    volumes:
      - ./docker/minio/data:/data
    ports:
      - ${MINIO_PORT}:9000
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio123}
    networks:
      - webnetwork
    hostname: minio
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  meilisearch:
    image: 'getmeili/meilisearch:latest'
    environment:
       - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-meilimaster123}
       - MEILI_ENV=${MEILI_ENV:-production}
    volumes:
     - ./docker/meilisearch/data:/data.ms
    networks:
      - webnetwork
    ports:
     - ${MEILI_PORT:-7700}:7700
    hostname: meilisearch


networks:
  webnetwork:
    name: ${NETWORK_NAME:-dev_network}
    driver: bridge
