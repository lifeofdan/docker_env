services:
  workspace:
    build:
      context: ./services/workspace
    tty: true
    volumes:
      - ./projects:/projects
    networks:
      - webnetwork
    hostname: workspace

  redisdb:
    build:
      context: ./services/redis
    volumes:
      - ./services/redis/data:/data
    networks:
      - webnetwork
    hostname: redisdb

  nginx:
    build:
      context: ./services/nginx
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    restart: always
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443
    volumes:
      - ./projects:/projects
      - ./services/nginx/sites:/etc/nginx/conf.d
    depends_on:
      - phpfpm
      - redisdb
      - db
      - adminer
    networks:
      webnetwork:
        aliases:
          - moodle.test
          - api.test
    hostname: nginx

  db:
    build:
      context: ./services/db
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-dbpassword}
      - MYSQL_USER=${MYSQL_USER:-dbuser}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-dbuser}
    networks:
      - webnetwork
    volumes:
      - ./services/db/data:/var/lib/mysql
    hostname: mariadb

  surrealdb:
    build:
      context: ./services/surrealdb
    restart: always
    ports:
      - ${SURREAL_PORT}:8000
    entrypoint:
      - /surreal
      - start
      - -u
      - root
      - -p
      - ${SURREAL_ROOT_PASSWORD:-root}
      - file:/data/mydata.db
    networks:
      - webnetwork
    volumes:
      - ./services/surrealdb/data:/data
    hostname: surrealdb

  postgres:
    build:
      context: ./services/postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dbpassword}
      - POSTGRES_USER=${POSTGRES_USER:-dbuser}
    networks:
      - webnetwork
    volumes:
      - ./services/postgres/data:/var/lib/postgresql/data
    hostname: postgres

  py:
    build:
      context: ./services/python
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: py

  rust:
    build:
      context: ./services/rust
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    # ports:
    #   - ${RUST_PORT}:8080
    networks:
      - webnetwork
    hostname: rust

  phpfpm:
    build:
      context: ./services/phpfpm
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: phpfpm

  elixir:
    build:
      context: ./services/elixir
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: elixir

  deno:
    build:
      context: ./services/deno
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: deno

  dotnet:
    build:
      context: ./services/dotnet
      args:
        - USERID=${USERID}
        - GROUPID=${GROUPID}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ./projects:/projects
      - ./.key/:/home/${USER_NAME}/.ssh
    networks:
      - webnetwork
    hostname: dotnet

  mongo:
    image: mongo
    restart: always
    environment:
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-dbpassword}
      - MONGODB_USERNAME=${MONGODB_USERNAME:-dbuser}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD:-dbpassword}
    volumes:
      - ./services/mongo/data:/data/db
    networks:
      - webnetwork
    hostname: mongodb

  mail:
    image: mailhog/mailhog
    ports:
      - ${MAILHOG_PORT:-1025}:1025
      - ${MAILHOG_UI:-8025}:8025
    networks:
      - webnetwork
    hostname: mailhog

  adminer:
    image: adminer
    networks:
      - webnetwork
    hostname: adminer

  nodejs:
    build:
      context: ./services/nodejs
    volumes:
      - ./projects:/projects
    hostname: nodejs
    ports:
      - ${NODE_PORT}:8080
    networks:
      - webnetwork

  minio:
    build:
      context: "./services/minio"
    volumes:
      - ./services/minio/data:/data
    ports:
      - ${MINIO_PORT}:9000
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio123}
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minio123}
    networks:
      - webnetwork
    hostname: minio
    command: server --address 0.0.0.0:9000 --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  meilisearch:
    image: "getmeili/meilisearch:latest"
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-meilimaster123}
      - MEILI_ENV=${MEILI_ENV:-production}
    volumes:
      - ./services/meilisearch/data:/data.ms
    networks:
      - webnetwork
    ports:
      - ${MEILI_PORT:-7700}:7700
    hostname: meilisearch

networks:
  webnetwork:
    name: ${NETWORK_NAME:-dev_network}
    driver: bridge
